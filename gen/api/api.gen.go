// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CredentialAddRequestType.
const (
	CredentialAddRequestTypeEMAILCODE CredentialAddRequestType = "EMAIL_CODE"
	CredentialAddRequestTypeGOOGLE2FA CredentialAddRequestType = "GOOGLE_2FA"
	CredentialAddRequestTypeOAUTH     CredentialAddRequestType = "OAUTH"
	CredentialAddRequestTypePASSWORD  CredentialAddRequestType = "PASSWORD"
)

// Defines values for CredentialListResponseCredentialsType.
const (
	CredentialListResponseCredentialsTypeEMAILCODE CredentialListResponseCredentialsType = "EMAIL_CODE"
	CredentialListResponseCredentialsTypeGOOGLE2FA CredentialListResponseCredentialsType = "GOOGLE_2FA"
	CredentialListResponseCredentialsTypeOAUTH     CredentialListResponseCredentialsType = "OAUTH"
	CredentialListResponseCredentialsTypePASSWORD  CredentialListResponseCredentialsType = "PASSWORD"
)

// Defines values for SecurityCreateRequestKycStatus.
const (
	SecurityCreateRequestKycStatusPENDING    SecurityCreateRequestKycStatus = "PENDING"
	SecurityCreateRequestKycStatusUNVERIFIED SecurityCreateRequestKycStatus = "UNVERIFIED"
	SecurityCreateRequestKycStatusVERIFIED   SecurityCreateRequestKycStatus = "VERIFIED"
)

// Defines values for SecurityCreateRequestRiskLevel.
const (
	SecurityCreateRequestRiskLevelHIGH   SecurityCreateRequestRiskLevel = "HIGH"
	SecurityCreateRequestRiskLevelLOW    SecurityCreateRequestRiskLevel = "LOW"
	SecurityCreateRequestRiskLevelMEDIUM SecurityCreateRequestRiskLevel = "MEDIUM"
)

// Defines values for SecuritySettingResponseKycStatus.
const (
	SecuritySettingResponseKycStatusPENDING    SecuritySettingResponseKycStatus = "PENDING"
	SecuritySettingResponseKycStatusUNVERIFIED SecuritySettingResponseKycStatus = "UNVERIFIED"
	SecuritySettingResponseKycStatusVERIFIED   SecuritySettingResponseKycStatus = "VERIFIED"
)

// Defines values for SecuritySettingResponseRiskLevel.
const (
	SecuritySettingResponseRiskLevelHIGH   SecuritySettingResponseRiskLevel = "HIGH"
	SecuritySettingResponseRiskLevelLOW    SecuritySettingResponseRiskLevel = "LOW"
	SecuritySettingResponseRiskLevelMEDIUM SecuritySettingResponseRiskLevel = "MEDIUM"
)

// Defines values for SecurityUpdateRequestKycStatus.
const (
	PENDING    SecurityUpdateRequestKycStatus = "PENDING"
	UNVERIFIED SecurityUpdateRequestKycStatus = "UNVERIFIED"
	VERIFIED   SecurityUpdateRequestKycStatus = "VERIFIED"
)

// Defines values for SecurityUpdateRequestRiskLevel.
const (
	HIGH   SecurityUpdateRequestRiskLevel = "HIGH"
	LOW    SecurityUpdateRequestRiskLevel = "LOW"
	MEDIUM SecurityUpdateRequestRiskLevel = "MEDIUM"
)

// Defines values for UserCreateRequestRole.
const (
	UserCreateRequestRoleADMIN  UserCreateRequestRole = "ADMIN"
	UserCreateRequestRoleTRADER UserCreateRequestRole = "TRADER"
	UserCreateRequestRoleUSER   UserCreateRequestRole = "USER"
)

// Defines values for UserProfileResponseRole.
const (
	UserProfileResponseRoleADMIN  UserProfileResponseRole = "ADMIN"
	UserProfileResponseRoleTRADER UserProfileResponseRole = "TRADER"
	UserProfileResponseRoleUSER   UserProfileResponseRole = "USER"
)

// Defines values for UserUpdateRequestRole.
const (
	ADMIN  UserUpdateRequestRole = "ADMIN"
	TRADER UserUpdateRequestRole = "TRADER"
	USER   UserUpdateRequestRole = "USER"
)

// AuthSessionResponse defines model for AuthSessionResponse.
type AuthSessionResponse struct {
	DeviceInfo *string    `json:"device_info,omitempty"`
	ExpiresAt  *time.Time `json:"expires_at,omitempty"`
	IpAddress  *string    `json:"ip_address,omitempty"`
	IsValid    *bool      `json:"is_valid,omitempty"`
	SessionId  *int64     `json:"session_id,omitempty"`
	Token      *string    `json:"token,omitempty"`
}

// CredentialAddRequest defines model for CredentialAddRequest.
type CredentialAddRequest struct {
	Identifier string                   `json:"identifier"`
	Secret     string                   `json:"secret"`
	Type       CredentialAddRequestType `json:"type"`
}

// CredentialAddRequestType defines model for CredentialAddRequest.Type.
type CredentialAddRequestType string

// CredentialAddResponse defines model for CredentialAddResponse.
type CredentialAddResponse struct {
	CredentialId *int64 `json:"credential_id,omitempty"`
}

// CredentialListResponse defines model for CredentialListResponse.
type CredentialListResponse struct {
	Credentials *[]struct {
		CreatedAt    *time.Time                             `json:"created_at,omitempty"`
		CredentialId *int64                                 `json:"credential_id,omitempty"`
		Identifier   *string                                `json:"identifier,omitempty"`
		IsActive     *bool                                  `json:"is_active,omitempty"`
		Type         *CredentialListResponseCredentialsType `json:"type,omitempty"`
		UpdatedAt    *time.Time                             `json:"updated_at,omitempty"`
	} `json:"credentials,omitempty"`
}

// CredentialListResponseCredentialsType defines model for CredentialListResponse.Credentials.Type.
type CredentialListResponseCredentialsType string

// Empty defines model for Empty.
type Empty = map[string]interface{}

// PermissionListResponse defines model for PermissionListResponse.
type PermissionListResponse struct {
	Permissions *[]struct {
		Comment    *string    `json:"comment,omitempty"`
		Granted    *bool      `json:"granted,omitempty"`
		GrantedAt  *time.Time `json:"granted_at,omitempty"`
		GrantedBy  *int64     `json:"granted_by,omitempty"`
		Permission *string    `json:"permission,omitempty"`
	} `json:"permissions,omitempty"`
}

// PermissionSetRequest defines model for PermissionSetRequest.
type PermissionSetRequest struct {
	Comment    string `json:"comment"`
	Granted    bool   `json:"granted"`
	GrantedBy  int64  `json:"granted_by"`
	Permission string `json:"permission"`
}

// SecurityCreateRequest defines model for SecurityCreateRequest.
type SecurityCreateRequest struct {
	Is2FAEnabled        bool                           `json:"is2FAEnabled"`
	KycStatus           SecurityCreateRequestKycStatus `json:"kycStatus"`
	RiskLevel           SecurityCreateRequestRiskLevel `json:"riskLevel"`
	WithdrawalWhitelist []string                       `json:"withdrawalWhitelist"`
}

// SecurityCreateRequestKycStatus defines model for SecurityCreateRequest.KycStatus.
type SecurityCreateRequestKycStatus string

// SecurityCreateRequestRiskLevel defines model for SecurityCreateRequest.RiskLevel.
type SecurityCreateRequestRiskLevel string

// SecuritySettingResponse defines model for SecuritySettingResponse.
type SecuritySettingResponse struct {
	Is2FAEnabled        *bool                             `json:"is2FAEnabled,omitempty"`
	KycStatus           *SecuritySettingResponseKycStatus `json:"kycStatus,omitempty"`
	RiskLevel           *SecuritySettingResponseRiskLevel `json:"riskLevel,omitempty"`
	UpdatedAt           *time.Time                        `json:"updatedAt,omitempty"`
	WithdrawalWhitelist *[]string                         `json:"withdrawalWhitelist,omitempty"`
}

// SecuritySettingResponseKycStatus defines model for SecuritySettingResponse.KycStatus.
type SecuritySettingResponseKycStatus string

// SecuritySettingResponseRiskLevel defines model for SecuritySettingResponse.RiskLevel.
type SecuritySettingResponseRiskLevel string

// SecurityUpdateRequest defines model for SecurityUpdateRequest.
type SecurityUpdateRequest struct {
	Is2FAEnabled        bool                           `json:"is2FAEnabled"`
	KycStatus           SecurityUpdateRequestKycStatus `json:"kycStatus"`
	RiskLevel           SecurityUpdateRequestRiskLevel `json:"riskLevel"`
	WithdrawalWhitelist []string                       `json:"withdrawalWhitelist"`
}

// SecurityUpdateRequestKycStatus defines model for SecurityUpdateRequest.KycStatus.
type SecurityUpdateRequestKycStatus string

// SecurityUpdateRequestRiskLevel defines model for SecurityUpdateRequest.RiskLevel.
type SecurityUpdateRequestRiskLevel string

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	Email     openapi_types.Email   `json:"email"`
	HashedPwd string                `json:"hashed_pwd"`
	Role      UserCreateRequestRole `json:"role"`
	Username  string                `json:"username"`
}

// UserCreateRequestRole defines model for UserCreateRequest.Role.
type UserCreateRequestRole string

// UserCreateResponse defines model for UserCreateResponse.
type UserCreateResponse struct {
	UserId *int64 `json:"user_id,omitempty"`
}

// UserIdParam defines model for UserIdParam.
type UserIdParam = int64

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	Email     openapi_types.Email `json:"email"`
	HashedPwd string              `json:"hashed_pwd"`
	Username  string              `json:"username"`
}

// UserProfileResponse defines model for UserProfileResponse.
type UserProfileResponse struct {
	CreatedAt *time.Time               `json:"created_at,omitempty"`
	Email     *string                  `json:"email,omitempty"`
	Role      *UserProfileResponseRole `json:"role,omitempty"`
	UpdatedAt *time.Time               `json:"updated_at,omitempty"`
	UserId    *int64                   `json:"user_id,omitempty"`
	Username  *string                  `json:"username,omitempty"`
}

// UserProfileResponseRole defines model for UserProfileResponse.Role.
type UserProfileResponseRole string

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	Email     *string                `json:"email,omitempty"`
	HashedPwd *string                `json:"hashed_pwd,omitempty"`
	Role      *UserUpdateRequestRole `json:"role,omitempty"`
	Username  *string                `json:"username,omitempty"`
}

// UserUpdateRequestRole defines model for UserUpdateRequest.Role.
type UserUpdateRequestRole string

// UserUpdateResponse defines model for UserUpdateResponse.
type UserUpdateResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = UserCreateRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLoginRequest

// LogoutUserJSONRequestBody defines body for LogoutUser for application/json ContentType.
type LogoutUserJSONRequestBody = Empty

// GetUserProfileJSONRequestBody defines body for GetUserProfile for application/json ContentType.
type GetUserProfileJSONRequestBody = Empty

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UserUpdateRequest

// GetCredentialsJSONRequestBody defines body for GetCredentials for application/json ContentType.
type GetCredentialsJSONRequestBody = Empty

// AddCredentialJSONRequestBody defines body for AddCredential for application/json ContentType.
type AddCredentialJSONRequestBody = CredentialAddRequest

// GetUserPermissionsJSONRequestBody defines body for GetUserPermissions for application/json ContentType.
type GetUserPermissionsJSONRequestBody = Empty

// SetUserPermissionsJSONRequestBody defines body for SetUserPermissions for application/json ContentType.
type SetUserPermissionsJSONRequestBody = PermissionSetRequest

// GetUserSecurityJSONRequestBody defines body for GetUserSecurity for application/json ContentType.
type GetUserSecurityJSONRequestBody = Empty

// CreateUserSecurityJSONRequestBody defines body for CreateUserSecurity for application/json ContentType.
type CreateUserSecurityJSONRequestBody = SecurityCreateRequest

// UpdateUserSecurityJSONRequestBody defines body for UpdateUserSecurity for application/json ContentType.
type UpdateUserSecurityJSONRequestBody = SecurityUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new user account
	// (POST /user)
	RegisterUser(c *gin.Context)
	// Authenticate user and create a new session
	// (POST /user/login)
	LoginUser(c *gin.Context)
	// Invalidate an existing session
	// (POST /user/logout)
	LogoutUser(c *gin.Context)
	// Get user profile information by ID
	// (GET /user/{userId})
	GetUserProfile(c *gin.Context, userId UserIdParam)
	// Update user profile information
	// (PUT /user/{userId})
	UpdateUserProfile(c *gin.Context, userId UserIdParam)
	// Get all credentials for a user
	// (GET /user/{userId}/credentials)
	GetCredentials(c *gin.Context, userId UserIdParam)
	// Add a new credential for a user
	// (POST /user/{userId}/credentials)
	AddCredential(c *gin.Context, userId UserIdParam)
	// Get all permissions for a user
	// (GET /user/{userId}/permissions)
	GetUserPermissions(c *gin.Context, userId UserIdParam)
	// Set permissions for a user
	// (POST /user/{userId}/permissions)
	SetUserPermissions(c *gin.Context, userId UserIdParam)
	// Get security settings for a user
	// (GET /user/{userId}/security)
	GetUserSecurity(c *gin.Context, userId UserIdParam)
	// Create security settings for a user
	// (POST /user/{userId}/security)
	CreateUserSecurity(c *gin.Context, userId UserIdParam)
	// Update security settings for a user
	// (PUT /user/{userId}/security)
	UpdateUserSecurity(c *gin.Context, userId UserIdParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogoutUser(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserProfile(c, userId)
}

// UpdateUserProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserProfile(c, userId)
}

// GetCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetCredentials(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCredentials(c, userId)
}

// AddCredential operation middleware
func (siw *ServerInterfaceWrapper) AddCredential(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddCredential(c, userId)
}

// GetUserPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetUserPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserPermissions(c, userId)
}

// SetUserPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetUserPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserPermissions(c, userId)
}

// GetUserSecurity operation middleware
func (siw *ServerInterfaceWrapper) GetUserSecurity(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserSecurity(c, userId)
}

// CreateUserSecurity operation middleware
func (siw *ServerInterfaceWrapper) CreateUserSecurity(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUserSecurity(c, userId)
}

// UpdateUserSecurity operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserSecurity(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserSecurity(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/user", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/user/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	router.GET(options.BaseURL+"/user/:userId", wrapper.GetUserProfile)
	router.PUT(options.BaseURL+"/user/:userId", wrapper.UpdateUserProfile)
	router.GET(options.BaseURL+"/user/:userId/credentials", wrapper.GetCredentials)
	router.POST(options.BaseURL+"/user/:userId/credentials", wrapper.AddCredential)
	router.GET(options.BaseURL+"/user/:userId/permissions", wrapper.GetUserPermissions)
	router.POST(options.BaseURL+"/user/:userId/permissions", wrapper.SetUserPermissions)
	router.GET(options.BaseURL+"/user/:userId/security", wrapper.GetUserSecurity)
	router.POST(options.BaseURL+"/user/:userId/security", wrapper.CreateUserSecurity)
	router.PUT(options.BaseURL+"/user/:userId/security", wrapper.UpdateUserSecurity)
}
